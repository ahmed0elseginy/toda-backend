/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.toda.user.controller.generated;

import com.toda.user.model.dto.generated.ChangePasswordRequest;
import com.toda.user.model.dto.generated.CheckTokenRequest;
import com.toda.user.model.dto.generated.CreateUserDTO;
import com.toda.user.model.dto.generated.ErrorVTO;
import com.toda.user.model.dto.generated.LoginUserDTO;
import com.toda.user.model.dto.generated.LoginUserVTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.10.0")
@Validated
@Controller
@Tag(name = "Auth", description = "the Auth API")
public interface AuthController {

    /**
     * GET /activate : Activate User Account
     *
     * @param username Username to activate (required)
     * @return User activated (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "activateUser",
        summary = "Activate User Account",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User activated"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/activate",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> _activateUser(
        @NotNull @Parameter(name = "username", description = "Username to activate", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "username", required = true) String username
    );


    /**
     * POST /changePassword : Change user password
     *
     * @param changePasswordRequest  (required)
     * @return Password changed successfully (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "changePassword",
        summary = "Change user password",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Password changed successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/changePassword",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> _changePassword(
        @Parameter(name = "ChangePasswordRequest", description = "", required = true) @Valid @RequestBody ChangePasswordRequest changePasswordRequest
    );


    /**
     * POST /checkToken : Check token validity
     *
     * @param checkTokenRequest  (required)
     * @return Token is valid (status code 200)
     *         or Invalid token (status code 401)
     */
    @Operation(
        operationId = "checkToken",
        summary = "Check token validity",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Token is valid"),
            @ApiResponse(responseCode = "401", description = "Invalid token")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/checkToken",
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> _checkToken(
        @Parameter(name = "CheckTokenRequest", description = "", required = true) @Valid @RequestBody CheckTokenRequest checkTokenRequest
    );


    /**
     * POST /forgetPassword : Request password reset
     *
     * @param checkTokenRequest  (required)
     * @return OTP sent to email (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "forgetPassword",
        summary = "Request password reset",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OTP sent to email"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/forgetPassword",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> _forgetPassword(
        @Parameter(name = "CheckTokenRequest", description = "", required = true) @Valid @RequestBody CheckTokenRequest checkTokenRequest
    );


    /**
     * POST /auth/login : Login
     *
     * @param loginUserDTO  (required)
     * @return Ok (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "login",
        summary = "Login",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginUserVTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<LoginUserVTO> _login(
        @Parameter(name = "LoginUserDTO", description = "", required = true) @Valid @RequestBody LoginUserDTO loginUserDTO
    );


    /**
     * GET /regenrateOtp : Regenerate OTP
     *
     * @param email  (required)
     * @return OTP sent to email (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "regenerateOtp",
        summary = "Regenerate OTP",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OTP sent to email"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/regenrateOtp",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> _regenerateOtp(
        @NotNull @Parameter(name = "email", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = true) String email
    );


    /**
     * POST /auth/register : Register User
     *
     * @param createUserDTO  (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "registerUser",
        summary = "Register User",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> _registerUser(
        @Parameter(name = "CreateUserDTO", description = "", required = true) @Valid @RequestBody CreateUserDTO createUserDTO
    );

}
