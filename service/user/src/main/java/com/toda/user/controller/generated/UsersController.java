/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.toda.user.controller.generated;

import com.toda.user.model.dto.generated.DeleteUserRequest;
import com.toda.user.model.dto.generated.ErrorVTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.10.0")
@Validated
@Controller
@Tag(name = "Users", description = "the Users API")
public interface UsersController {

    /**
     * GET /users/check/{userId} : Check if user exists (for internal service calls only)
     *
     * @param userId ID of user to check (required)
     * @param xApiKey Internal API key used for service-to-service authentication (required)
     * @return User exists (status code 204)
     *         or User not found (status code 404)
     *         or Unauthorized – Invalid or missing API key (status code 401)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "checkUserExists",
        summary = "Check if user exists (for internal service calls only)",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "204", description = "User exists"),
            @ApiResponse(responseCode = "404", description = "User not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized – Invalid or missing API key"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/check/{userId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> _checkUserExists(
        @Parameter(name = "userId", description = "ID of user to check", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @NotNull @Parameter(name = "x-api-key", description = "Internal API key used for service-to-service authentication", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "x-api-key", required = true) String xApiKey
    );


    /**
     * DELETE /delete : Delete user account
     *
     * @param deleteUserRequest  (required)
     * @return User deleted successfully (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "Delete user account",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorVTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/delete",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> _deleteUser(
        @Parameter(name = "DeleteUserRequest", description = "", required = true) @Valid @RequestBody DeleteUserRequest deleteUserRequest
    );

}
