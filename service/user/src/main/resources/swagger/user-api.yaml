openapi: 3.0.3

info:
  version: "1.0"
  title: "User Management Service"
  contact:
    email: "ahmed0elseginy@gmail.com"
    name: "Ahmed El-Seginy"

servers:
  - url: http://localhost:8104/

tags:
  - name: Auth
  - name: Profile
  - name: Users
  - name: Role

paths:
  /auth/register:
    post:
      tags: [ Auth ]
      summary: Register User
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDTO'
      responses:
        '201': { description: Created }
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /auth/login:
    post:
      tags: [ Auth ]
      summary: Login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDTO'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserVTO'
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /activate:
    get:
      tags: [ Auth ]
      summary: Activate User Account
      operationId: activateUser
      parameters:
        - in: query
          name: username
          schema:
            type: string
          required: true
          description: Username to activate
      responses:
        '200': { description: User activated }
        '400': { $ref: '#/components/responses/BadRequest' }

  /checkToken:
    post:
      tags: [ Auth ]
      summary: Check token validity
      operationId: checkToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200': { description: Token is valid }
        '401': { description: Invalid token }

  /forgetPassword:
    post:
      tags: [ Auth ]
      summary: Request password reset
      operationId: forgetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200': { description: OTP sent to email }
        '400': { $ref: '#/components/responses/BadRequest' }

  /changePassword:
    post:
      tags: [ Auth ]
      summary: Change user password
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                otp:
                  type: string
                newPassword:
                  type: string
      responses:
        '200': { description: Password changed successfully }
        '400': { $ref: '#/components/responses/BadRequest' }

  /regenrateOtp:
    get:
      tags: [ Auth ]
      summary: Regenerate OTP
      operationId: regenerateOtp
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
      responses:
        '200': { description: OTP sent to email }
        '400': { $ref: '#/components/responses/BadRequest' }

  /profile:
    get:
      tags: [ Profile ]
      summary: Get logged-in user profile using token
      operationId: getUserProfile
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileVTO'
        '400': { $ref: '#/components/responses/BadRequest' }
    put:
      tags: [ Profile ]
      summary: Update logged-in user profile
      operationId: updateUserProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileDTO'
      responses:
        '200': { description: User updated successfully }
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /delete:
    delete:
      tags: [ Users ]
      summary: Delete user account
      operationId: deleteUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ username, password ]
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200': { description: User deleted successfully }
        '400': { $ref: '#/components/responses/BadRequest' }

  /users/check/{userId}:
    get:
      tags: [ Users ]
      summary: Check if user exists (for internal service calls only)
      operationId: checkUserExists
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of user to check
          schema:
            type: integer
            format: int64
        - name: x-api-key
          in: header
          required: true
          description: Internal API key used for service-to-service authentication
          schema:
            type: string
      responses:
        '204':
          description: User exists
        '404':
          description: User not found
        '401':
          description: Unauthorized â€“ Invalid or missing API key
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/roles/{roleId}:
    post:
      tags: [ Role ]
      summary: Assign a role to a user
      operationId: assignRoleToUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201': { description: Created }
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/InternalServerError' }

    delete:
      tags: [ Role ]
      summary: Remove a role from a user
      operationId: removeRoleFromUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204': { description: No Content }
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/InternalServerError' }

components:
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorVTO'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorVTO'

  schemas:
    ErrorVTO:
      type: object
      properties:
        domain:
          type: string
        code:
          type: string
        message:
          type: string
        formErrors:
          type: array
          items:
            $ref: '#/components/schemas/FormError'

    FormError:
      type: object
      properties:
        attrName:
          type: string
        code:
          type: string

    LookupVTO:
      type: object
      properties:
        id:
          type: integer
        titleEn:
          type: string

    LightUserVTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fullName:
          type: string

    LoginUserVTO:
      type: object
      properties:
        token:
          type: string

    LoginUserDTO:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    CreateUserDTO:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - mobileNumber
      properties:
        firstName:
          type: string
          maxLength: 25
          minLength: 2
        lastName:
          type: string
          maxLength: 25
          minLength: 2
        mobileNumber:
          type: string
        password:
          type: string
        email:
          type: string
          format: email

    UserProfileDTO:
      type: object
      required:
        - firstName
        - lastName
        - mobileNumber
      properties:
        firstName:
          type: string
          maxLength: 25
          minLength: 2
        lastName:
          type: string
          maxLength: 25
          minLength: 2
        mobileNumber:
          type: string

    UserProfileVTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        mobileNumber:
          type: string
        email:
          type: string

    UserResultSet:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LightUserVTO'
