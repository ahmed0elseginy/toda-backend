openapi: 3.0.3

info:
  version: "1.0"
  title: "Todo List Service"
  contact:
    email: "ahmed0elseginy@gmail.com"
    name: "Ahmed El-Seginy"

servers:
  - url: http://localhost:8102/

tags:
  - name: Todo

paths:
  /todos:
    post:
      tags:
        - Todo
      summary: Create a new todo item
      operationId: createTodo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTodoDTO'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoVTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Todo
      summary: Search todo items by title
      operationId: searchTodos
      parameters:
        - name: title
          in: query
          description: Title to search for
          required: false
          schema:
            type: string
        - name: description
          in: query
          description: description to search for
          required: false
          schema:
            type: string
        - name: priority
          in: query
          description: priority to search for
          required: false
          schema:
            type: string
            enum: [ LOW, MEDIUM, HIGH ]
        - name: status
          in: query
          description: status to search for
          required: false
          schema:
            type: string
            enum: [ PENDING, IN_PROGRESS, COMPLETED ]
        - name: pageNum
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResultSet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /todos/{id}:
    get:
      tags:
        - Todo
      summary: Get a todo item by ID
      operationId: getTodo
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the todo item
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoVTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Todo
      summary: Update a todo item
      operationId: updateTodo
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the todo item
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTodoDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoVTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Todo
      summary: Delete a todo item
      operationId: deleteTodo
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the todo item
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorVTO'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorVTO'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorVTO'

  schemas:
    ErrorVTO:
      type: object
      properties:
        domain:
          type: string
        code:
          type: string
        message:
          type: string
        formErrors:
          type: array
          items:
            $ref: '#/components/schemas/FormError'

    FormError:
      type: object
      properties:
        attrName:
          type: string
        code:
          type: string

    LookupVTO:
      type: object
      properties:
        id:
          type: integer
        titleEn:
          type: string

    CreateTodoDTO:
      type: object
      required:
        - title
        - userId
        - description
        - priority
        - status
      properties:
        title:
          type: string
          maxLength: 100
          minLength: 1
        userId:
          type: integer
          format: int64
        description:
          type: string
        priority:
          type: string
          enum: [ LOW, MEDIUM, HIGH ]
        status:
          type: string
          enum: [ PENDING, IN_PROGRESS, COMPLETED ]

    UpdateTodoDTO:
      type: object
      properties:
        title:
          type: string
          maxLength: 100
          minLength: 1
        description:
          type: string
        priority:
          type: string
          enum: [ LOW, MEDIUM, HIGH ]
        status:
          type: string
          enum: [ PENDING, IN_PROGRESS, COMPLETED ]

    TodoVTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        userId:
          type: integer
          format: int64
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        priority:
          type: string
          enum: [ LOW, MEDIUM, HIGH ]
        status:
          type: string
          enum: [ PENDING, IN_PROGRESS, COMPLETED ]

    TodoResultSet:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TodoVTO'
        pageNum:
          type: integer
        pageSize:
          type: integer
        total:
          type: integer
          format: int64
