/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.toda.todo.controller.generated;

import com.toda.todo.model.dto.generated.CreateTodoDTO;
import com.toda.todo.model.dto.generated.ErrorVTO;
import com.toda.todo.model.dto.generated.TodoResultSet;
import com.toda.todo.model.dto.generated.TodoVTO;
import com.toda.todo.model.dto.generated.UpdateTodoDTO;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-10T11:23:03.852535400+03:00[Africa/Cairo]", comments = "Generator version: 7.10.0")
@Validated
public interface TodoApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /todos : Create a new todo item
     *
     * @param createTodoDTO  (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/todos",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Long> createTodo(
         @Valid @RequestBody CreateTodoDTO createTodoDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "123";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"domain\" : \"domain\", \"formErrors\" : [ { \"code\" : \"code\", \"attrName\" : \"attrName\" }, { \"code\" : \"code\", \"attrName\" : \"attrName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"domain\" : \"domain\", \"formErrors\" : [ { \"code\" : \"code\", \"attrName\" : \"attrName\" }, { \"code\" : \"code\", \"attrName\" : \"attrName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /todos/{id} : Delete a todo item
     *
     * @param id The ID of the todo item (required)
     * @return No Content (status code 204)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/todos/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteTodo(
         @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"domain\" : \"domain\", \"formErrors\" : [ { \"code\" : \"code\", \"attrName\" : \"attrName\" }, { \"code\" : \"code\", \"attrName\" : \"attrName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"domain\" : \"domain\", \"formErrors\" : [ { \"code\" : \"code\", \"attrName\" : \"attrName\" }, { \"code\" : \"code\", \"attrName\" : \"attrName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"domain\" : \"domain\", \"formErrors\" : [ { \"code\" : \"code\", \"attrName\" : \"attrName\" }, { \"code\" : \"code\", \"attrName\" : \"attrName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /todos/{id} : Get a todo item by ID
     *
     * @param id The ID of the todo item (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/todos/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TodoVTO> getTodo(
         @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"priority\" : \"LOW\", \"userId\" : 6, \"status\" : \"PENDING\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"domain\" : \"domain\", \"formErrors\" : [ { \"code\" : \"code\", \"attrName\" : \"attrName\" }, { \"code\" : \"code\", \"attrName\" : \"attrName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"domain\" : \"domain\", \"formErrors\" : [ { \"code\" : \"code\", \"attrName\" : \"attrName\" }, { \"code\" : \"code\", \"attrName\" : \"attrName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"domain\" : \"domain\", \"formErrors\" : [ { \"code\" : \"code\", \"attrName\" : \"attrName\" }, { \"code\" : \"code\", \"attrName\" : \"attrName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /todos : Search todo items by title
     *
     * @param title Title to search for (optional)
     * @param description description to search for (optional)
     * @param priority priority to search for (optional)
     * @param status status to search for (optional)
     * @param pageNum  (optional, default to 0)
     * @param pageSize  (optional, default to 10)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/todos",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TodoResultSet> searchTodos(
         @Valid @RequestParam(value = "title", required = false) String title,
         @Valid @RequestParam(value = "description", required = false) String description,
         @Valid @RequestParam(value = "priority", required = false) String priority,
         @Valid @RequestParam(value = "status", required = false) String status,
         @Valid @RequestParam(value = "pageNum", required = false, defaultValue = "0") Integer pageNum,
         @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total\" : 5, \"data\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"priority\" : \"LOW\", \"userId\" : 6, \"status\" : \"PENDING\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"priority\" : \"LOW\", \"userId\" : 6, \"status\" : \"PENDING\" } ], \"pageSize\" : 5, \"pageNum\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"domain\" : \"domain\", \"formErrors\" : [ { \"code\" : \"code\", \"attrName\" : \"attrName\" }, { \"code\" : \"code\", \"attrName\" : \"attrName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"domain\" : \"domain\", \"formErrors\" : [ { \"code\" : \"code\", \"attrName\" : \"attrName\" }, { \"code\" : \"code\", \"attrName\" : \"attrName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /todos/{id} : Update a todo item
     *
     * @param id The ID of the todo item (required)
     * @param updateTodoDTO  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/todos/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TodoVTO> updateTodo(
         @PathVariable("id") Long id,
         @Valid @RequestBody UpdateTodoDTO updateTodoDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"priority\" : \"LOW\", \"userId\" : 6, \"status\" : \"PENDING\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"domain\" : \"domain\", \"formErrors\" : [ { \"code\" : \"code\", \"attrName\" : \"attrName\" }, { \"code\" : \"code\", \"attrName\" : \"attrName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"domain\" : \"domain\", \"formErrors\" : [ { \"code\" : \"code\", \"attrName\" : \"attrName\" }, { \"code\" : \"code\", \"attrName\" : \"attrName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"domain\" : \"domain\", \"formErrors\" : [ { \"code\" : \"code\", \"attrName\" : \"attrName\" }, { \"code\" : \"code\", \"attrName\" : \"attrName\" } ], \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
